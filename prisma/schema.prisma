generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  user
  admin
}

model Like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
}

model CommentLike {
  userId    String
  commentId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([commentId, userId])
}

model Comment {
  id     String @id @default(cuid())
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  likes    CommentLike[]
  content  String
  mentions User[]        @relation("MentionedInComments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  bio           String?   @default("This user does not have a bio yet.")
  theme         Theme?    @default(system)

  mentionEmails       Boolean? @default(true)
  communicationEmails Boolean? @default(true)
  marketingEmails     Boolean? @default(true)
  socialEmails        Boolean? @default(true)
  directMessageEmails Boolean? @default(true)

  posts    Post[]
  likes    Like[]
  mentions Post[] @relation("Mentions")

  followers User[] @relation("Followers")
  follows   User[] @relation("Followers")

  comments        Comment[]
  commentLikes    CommentLike[]
  commentMentions Comment[]     @relation("MentionedInComments")
}

enum Theme {
  light
  system
  dark
}

model Post {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  mentions User[]    @relation("Mentions")
  likes    Like[]
  comments Comment[]

  @@unique([createdAt, id])
  @@index([content])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
